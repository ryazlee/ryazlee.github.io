{"version":3,"sources":["components/MasterCard.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","subtext","link","palette","primary","main","secondary","useStyles","makeStyles","root","maxWidth","title","fontSize","color","marginBottom","center","margin","position","top","left","transform","body","padding","footer","paddingTop","textDecoration","fontWeight","OutlinedCard","classes","ThemeProvider","Card","className","variant","CardContent","Typography","class","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAQMA,EAAQC,YAAe,CAC3BC,QAAS,UACTC,KAAM,UACNC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,cAKNE,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,OAEZC,MAAO,CACLC,SAAU,SACVC,MAAOd,EAAMI,QAAQC,QAAQC,MAE/BJ,QAAS,CACPa,aAAc,KACdF,SAAU,OACVC,MAAOd,EAAME,SAEfc,OAAQ,CACNC,OAAQ,EACRC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,yBAEbC,KAAM,CACJT,SAAU,QACVU,QAAS,QACTT,MAAOd,EAAMI,QAAQG,UAAUD,MAEjCkB,OAAQ,CACNX,SAAU,QACVY,WAAY,GACZX,MAAOd,EAAMI,QAAQG,UAAUD,MAEjCH,KAAM,CACJW,MAAOd,EAAMG,KACbuB,eAAgB,OAChB,UAAW,CACTC,WAAY,WAMH,SAASC,IACtB,IAAMC,EAAUrB,IAEhB,OACE,kBAACsB,EAAA,EAAD,CAAe9B,MAAOA,GACpB,kBAAC+B,EAAA,EAAD,CAAMC,UAAWH,EAAQnB,KAAO,IAAMmB,EAAQb,OAAQiB,QAAQ,YAC5D,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYH,UAAWH,EAAQjB,OAA/B,sCAGA,kBAACuB,EAAA,EAAD,CAAYH,UAAWH,EAAQ3B,SAA/B,sBAGA,kBAACiC,EAAA,EAAD,CAAYH,UAAWH,EAAQP,MAA/B,2EAC0E,uBAAGc,MAAOP,EAAQ1B,KAAMkC,KAAK,0BAA7B,SAD1E,gGACsO,uBAAGD,MAAOP,EAAQ1B,KAAMkC,KAAK,+BAA7B,YADtO,uDAEE,6BAFF,wDAGuD,uBAAGD,MAAOP,EAAQ1B,KAAMkC,KAAK,4DAA7B,YAHvD,iEAGyN,uBAAGD,MAAOP,EAAQ1B,KAAMkC,KAAK,8BAA7B,UAHzN,QAKA,kBAACF,EAAA,EAAD,CAAYH,UAAWH,EAAQL,QAA/B,2DAC0D,uBAAGY,MAAOP,EAAQ1B,KAAMkC,KAAK,uDAA7B,UAD1D,wBAC4K,uBAAGD,MAAOP,EAAQ1B,KAAMkC,KAAK,wCAA7B,YAD5K,oBAC6Q,uBAAGD,MAAOP,EAAQ1B,KAAMkC,KAAK,gCAA7B,SAD7Q,gCCtEKC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1aa8e1eb.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = createMuiTheme({\n  subtext: '#8078b8',\n  link: '#329582',\n  palette: {\n    primary: {\n      main: '#5d297c', \n    },\n    secondary: {\n      main: '#4860a8',\n    },\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: '90%',\n  },\n  title: {\n    fontSize: '1.5rem',\n    color: theme.palette.primary.main,\n  },\n  subtext: {\n    marginBottom: '3%',\n    fontSize: '1rem',\n    color: theme.subtext,\n  },\n  center: {\n    margin: 0,\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n  },\n  body: {\n    fontSize: '.9rem', \n    padding: '3%, 0',\n    color: theme.palette.secondary.main,\n  },\n  footer: {\n    fontSize: '.9rem',\n    paddingTop: 15,\n    color: theme.palette.secondary.main,\n  },\n  link: {\n    color: theme.link,\n    textDecoration: 'none',\n    '&:hover': {\n      fontWeight: 'bold',\n    }\n  },\n});\n\n\nexport default function OutlinedCard() {\n  const classes = useStyles();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Card className={classes.root + ' ' + classes.center} variant=\"outlined\">\n        <CardContent> \n          <Typography className={classes.title}>\n            Ryan Lee üíª ü•è\n          </Typography>\n          <Typography className={classes.subtext}> \n            SWE Intern @ Apple\n          </Typography>\n          <Typography className={classes.body}>\n            Hi! My name is Ryan and I am currently a software engineering intern at <a class={classes.link} href=\"https://www.apple.com/\">Apple</a> working for the AppleCare Field Diagnostics and Tools team. This past summer, I interned at <a class={classes.link} href=\"https://www.snap.com/en-US/\">Snap Inc</a> where I was a client developer for the Search team.\n            <br/>\n            In my free time I enjoy playing ultimate frisbee for <a class={classes.link} href=\"https://www.youtube.com/channel/UCKgR8SJmRb23k9WPwN0B-zg\">Cal UGMO</a> as well as doing small side projects that you can find on my <a class={classes.link} href=\"https://github.com/ryazlee\">Github</a> :).\n          </Typography>\n          <Typography className={classes.footer}> \n            Want to learn more about me?  Feel free to check out my <a class={classes.link} href=\"https://ryazlee.github.io/files/ryan_lee_resume.pdf\">resume</a>, connect with me on <a class={classes.link} href=\"https://www.linkedin.com/in/ryazlee/\">LinkedIn</a>, or shoot me an <a class={classes.link} href=\"mailto:ryanjlee@berkeley.edu\">email</a>.  I am happy to connect!\n          </Typography>\n        </CardContent>\n      </Card>\n    </ThemeProvider>\n  );\n}\n\n","import React from 'react';\nimport MasterCard from './components/MasterCard.js';\n\nfunction App() {\n  return (\n    <MasterCard/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}