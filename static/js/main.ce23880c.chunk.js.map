{"version":3,"sources":["assets/peeking_bitmoji.png","components/ColoredLine.js","components/Main.js","config.js","components/Footer.js","components/Frame.js","components/DarkModeSupport/Toggle.js","components/DarkModeSupport/DarkModeToggle.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ColoredLine","className","Main","href","Component","connectLinks","Frame","src","peeking_bitmoji","alt","Toggle","checked","onChange","type","id","htmlFor","DarkModeToggle","darkMode","useDarkMode","onClick","disable","value","toggle","enable","App","Header","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,6C,gKCM5BC,G,KAHK,kBAChB,wBAAIC,UAAU,kBCkBDC,E,uKAhBX,OACE,6BACE,kBAAC,EAAD,MADF,yEAIE,uBAAGC,KAAK,oBAAR,YAJF,gBAKE,6BACA,6BANF,6DAQE,uBAAGA,KAAK,4DAAR,gBARF,uE,GAHWC,aCJNC,EAED,6BAFCA,EAGD,sDAHCA,EAIC,uCAJDA,EAKF,+BCSMH,E,uKARX,OACE,yBAAKD,UAAU,UACX,uBAAGA,UAAU,OAAOE,KAAME,GAA1B,mB,GAJOD,a,iBCUFE,E,uKARX,OACE,yBAAKL,UAAU,iBACZ,yBAAKM,IAAKC,IAAiBC,IAAI,yB,GAJtBL,aCWLM,EAbA,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACb,0BAAMX,UAAU,kBACd,2BACEA,UAAU,UACVY,KAAK,WACLF,QAASA,EACTC,SAAUA,EACVE,GAAG,YAEL,2BAAOC,QAAQ,c,QCWJC,G,MAhBQ,WACrB,IAAMC,EAAWC,aAAY,GAE7B,OACE,yBAAKjB,UAAU,oBACb,4BAAQY,KAAK,SAASM,QAASF,EAASG,SAAxC,UAGA,kBAAC,EAAD,CAAQT,QAASM,EAASI,MAAOT,SAAUK,EAASK,SACpD,4BAAQT,KAAK,SAASM,QAASF,EAASM,QAAxC,aCGWrB,E,uKAXX,OACE,wBAAID,UAAU,UACZ,4BAAI,uBAAGE,KAAME,GAAT,aACJ,4BAAI,uBAAGF,KAAME,GAAT,WACJ,4BAAI,uBAAGF,KAAME,GAAT,UACJ,4BAAI,kBAAC,EAAD,Y,GAPKD,aCiBJoB,MAff,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAACC,EAAD,MACA,yBAAKxB,UAAU,UACb,yBAAKA,UAAU,WACb,kBAAC,EAAD,MACA,kBAACyB,EAAD,UCHUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ce23880c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/peeking_bitmoji.7ac65931.png\";","import React from 'react';\nimport './../styles.scss';\n\nconst ColoredLine = () => (\n    <hr className=\"coloredLine\" />\n)\nexport default ColoredLine;","import React, { Component } from 'react';\nimport ColoredLine from './ColoredLine';\nimport '../styles.scss'\n\nclass Main extends Component {\n    render () {\n      return (\n        <div>\n          <ColoredLine />\n          Iâ€™m Ryan, a San Francisco Bay Area\n          based software engineer at&nbsp;\n          <a href=\"https://snap.com\">Snap Inc</a> ðŸ‘»\n          <br /> \n          <br />\n          In my free time I enjoy playing ultimate frisbee for&ensp;\n          <a href=\"https://www.youtube.com/channel/UCKgR8SJmRb23k9WPwN0B-zg\">Cal Ultimate</a>\n          &ensp;and learning more about the software engineering world :)\n        </div>\n      );\n    }\n  } \n  \n  export default Main;","export const connectLinks = {\n    twitter: 'https://twitter.com/7f1wB4bBpJ',\n    github: 'https://github.com/ryazlee',\n    resume: 'https://ryazlee.github.io/files/ryan_lee_resume.pdf',\n    linkedIn: 'https://www.linkedin.com/in/ryazlee/',\n    email: 'mailto:ryanjlee@berkeley.edu'\n};","import React, { Component } from 'react';\nimport { connectLinks } from '../config.js'\nimport '../styles.scss'\n\nclass Main extends Component {\n    render () {\n      return (\n        <div className=\"footer\">\n            <a className='link' href={connectLinks.resume}>Resume.pdf</a>\n        </div>\n      );\n    }\n  } \n  \n  export default Main;","import React, { Component } from 'react';\nimport peeking_bitmoji from '../assets/peeking_bitmoji.png'\nimport '../styles.scss'\n\nclass Frame extends Component {\n    render () {\n      return (\n        <div className=\"bottomBitmoji\">\n           <img src={peeking_bitmoji} alt=\"Peeking Bitmoji\"></img> \n        </div>\n      );\n    }\n  } \n  \n  export default Frame;","import React from 'react';\n\nconst Toggle = ({ checked, onChange }) => (\n  <span className=\"toggle-control\">\n    <input\n      className=\"dmcheck\"\n      type=\"checkbox\"\n      checked={checked}\n      onChange={onChange}\n      id=\"dmcheck\"\n    />\n    <label htmlFor=\"dmcheck\" />\n  </span>\n);\n\nexport default Toggle;\n","import React from 'react';\n\nimport Toggle from './Toggle';\nimport useDarkMode from 'use-dark-mode';\nimport './styles.scss'\n\nconst DarkModeToggle = () => {\n  const darkMode = useDarkMode(false);\n\n  return (\n    <div className=\"dark-mode-toggle\">\n      <button type=\"button\" onClick={darkMode.disable}>\n        â˜€\n      </button>\n      <Toggle checked={darkMode.value} onChange={darkMode.toggle} />\n      <button type=\"button\" onClick={darkMode.enable}>\n        â˜¾\n      </button>\n    </div>\n  );\n};\n\nexport default DarkModeToggle;\n","import React, { Component } from 'react';\nimport DarkModeToggle from './DarkModeSupport/DarkModeToggle.js'\nimport { connectLinks } from '../config.js'\nimport '../styles.scss'\n\nclass Main extends Component {\n    render () {\n      return (\n        <ul className='header'>\n          <li><a href={connectLinks.linkedIn}>LinkedIn</a></li>\n          <li><a href={connectLinks.github}>Github</a></li>\n          <li><a href={connectLinks.email}>Email</a></li>\n          <li><DarkModeToggle /></li>\n        </ul>\n      );\n    }\n  } \n  \n  export default Main;","import React from 'react';\nimport Main from './components/Main.js'\nimport Footer from './components/Footer.js'\nimport Frame from './components/Frame.js'\nimport Header from './components/Header.js'\nimport './styles.scss';\n\nfunction App() {\n  return (\n    <div>\n      <Frame />\n      <Header />\n      <div className=\"center\">\n        <div className=\"landing\">\n          <Main />\n          <Footer />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}